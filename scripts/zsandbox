#!/bin/bash
# generic sandbox command runner.
#
# The script zsandbox executes a semi colon separated list of commands
# on the localhost  from within a sandbox in a temporary directory. It can optionally
# install a package of files before executing the command.
#
# zsandbox [--install-package=warehouse:/tmp/blah.tar.gz] command_string

script_dir=$(dirname $(readlink -f $0))
source $script_dir/zoptparse.sh

zrequired=()
zoptional=( \
    "temp-dir|/tmp" \
    "working-dir" \
    "use-dir" \
    "tarball-if-fail" \
    "debug" \
    "tag|notag" \
    "install-package" \
    "echo-stdout" \
    "random-nice" \
    "fail-if-disk-full-above" \
    "stdout-copy-path||Writes stdout to this file (can be formatted as warehouse:)"
    "stderr-copy-path||Writes stdout to this file (can be formatted as warehouse:)"
)
_zstrict=0

zoptparse "$@" || exit 1

# with this hack we remove the zoptional switches
# from the front of the command line
while true; do
    case "$1" in
        --temp-dir*)
            shift 
            ;;
        --use-dir*)
            shift
            ;;
        --working-dir*)
            shift
            ;;
        --tarball-if-fail*)
            shift 
            ;;
        --debug*)
            shift 
            ;;
        --tag*)
            shift
            ;;
        --install-package*)
            shift
            ;;
        --echo-stdout*)
            shift
            ;;
        --random-nice*)
            shift
            ;;
        --fail-if-disk-full-above*)
            shift
            ;;
        --stdout-copy-path*)
            shift
            ;;
        --stderr-copy-path*)
            shift
            ;;
        *) break ;; # unrecognized, must be the command
    esac
done

# split the cmd string by ';' ... That way we can sandbox a chain of commands
IFS=';' read -r -a cmd_array <<< "$@"

[ ${#cmd_array[@]} -gt 0 ] || zerror "failure: usage: zsandbox [--options] command string"

if [ -n "$fail_if_disk_full_above" ]; then
    DU=$(df -lP "$temp_dir" | grep ^/ | tr -s ' ' | cut -d' ' -f5 | sed 's/%//')
    [ $DU -le $fail_if_disk_full_above ] || zerror "failure: %s is full (%d > %d)" "$temp_dir" "$DU" "$fail_if_disk_full_above"
fi

if [ -n "${working_dir:-$use_dir}" ]; then
    mkdir -p "${working_dir:-$use_dir}" && local_temp="${working_dir:-$use_dir}"
else
    ztempdir local_temp "zsandbox-$tag" "$temp_dir"
fi

[ -d "$local_temp" ] || zerror "failure: cannot create temporary directory"

pushd "$local_temp" >/dev/null || zerror "failure: directory %s is inaccessible" "$local_temp"

if [ -n "$install_package" ]; then
    
    # wait a random fraction of a second
    sleep $(echo "$RANDOM / 32767" | bc -l)s

    case "$install_package" in
        warehouse:*)
            rpath=$(echo "${install_package#*:}" | sed s,^/,,)
            local_package=$(cache fetch --no-transform "$rpath" 2>/dev/null)
            [ -n "$local_package" ] || zmessage "failure: %s is not in the warehouse" "$rpath"
            [ -f "$local_package" ] || zerror "failure: %s was not fetched correctly" "$rpath"
            ;;
        localhost:*)
            local_package="${install_package#*:}"
            ;;
        *:*) # other hosts
            local_package=$(basename "${install_package#*:}")
            scp -qB "$install_package" "$local_package" 2>/dev/null || zerror "failure: scp %s %s" "$install_package" "$local_package"
            ;;
        *)
            zerror "failure: unsupported path %s" "$install_package"
            ;;
    esac

    [ -e "$local_package" ] || zerror "failure: could not install %s" "$install_package"

    case "$local_package" in
        *.tar.gz)
            tar xfz "$local_package" 2>/dev/null || zerror "failure: could not unpack %s" "$local_package"
            ;;
    esac
    
fi

# nice is only a hint for the kernel, but can dramatically improve 
# parallel process performance
[ -n "$random_nice" ] && random_nice="nice -n $[ $RANDOM % 16]"


for cmd_inst in "${cmd_array[@]}"
do
    executable=$(echo $cmd_inst | awk '{print $1}')
    cmd_path=$(type -p "$executable")
    [ -x "$cmd_path" ] || zerror "failure: %s is not an executable file" "$executable"

    printf "%s " "${cmd_inst/$local_temp\//}" $@ >zsandbox.cmdline
    printf "\n" >>zsandbox.cmdline

    # Run the command, recording if it was successful. Afterwards we'll optionall write
    # stdout and stderr to a remote location
    if $random_nice $cmd_inst >zsandbox.stdout 2>zsandbox.stderr </dev/null; then
        cmd_ret=0
    else
        cmd_ret=1
        break
    fi
done

if [[ -n $stdout_copy_path ]]; then
    if ! /usr/bin/zwrite \
        --remote-path=$stdout_copy_path \
        --local-path=zsandbox.stdout; then
        zmessage "zwrite failed writing stdout to: %s" "$stdout_copy_path"
    fi
fi
if [[ -n $stderr_copy_path ]]; then
    if ! /usr/bin/zwrite \
        --remote-path=$stderr_copy_path \
        --local-path=zsandbox.stderr; then
        zmessage "zwrite failed writing stderr to: %s" "$stderr_copy_path"
    fi
fi

if [[ $cmd_ret -eq 0 ]]; then
    [ -n "$echo_stdout" ] && cat zsandbox.stdout
    exit 0
else
    # command failed
    rv=$?
    head -5 zsandbox.stderr 
fi

popd >/dev/null

if [ -n "$tarball_if_fail" ]; then
    tarball="${local_temp/zsandbox-/zsandbox-fail-}.tar.gz"
    cd "$temp_dir" && \
        tar cfz "$tarball" "$local_temp" \
        --transform=s/zsandbox-/zsandbox-fail-/ 2>/dev/null && \
        zmessage "failure: a sandbox command on %s failed: %s" "$HOSTNAME" "$tarball"
fi

exit $rv

: <<=cut
=pod

=head1 NAME

    zsandbox - run a command in a sandbox on localhost

=head1 SYNOPSIS

    zsandbox [--option=VALUE]... command [args]...

=head1 DESCRIPTION

The B<zsandbox> script executes a semi colon separated list of command with optional arguments
from inside a temporary directory on localhost. 

Note: the zsandbox options must occur BEFORE the command. After the first unrecognized
option name, the zsandbox will pass everything to the shell as a fully formed command.

=head1 OPTIONS

=over 4

=item --temp-dir=PREFIX

The prefix of the sandbox directory, defaults to /tmp.

=item --working-dir=PATH

Instead of generating a random directory name, use PATH
(and do not delete PATH on exit)

=item --use-dir=PATH

Same as --working-dir=PATH

=item --tag

An optional tag name embedded in the sandbox directory for
identification purposes.

=item --echo-stdout

If set, the command output will be printed on standard output if and
only if the return code is zero. See also tarball-if-fail.

=item --install-package=URI

A URI indicating a file that should be installed
into the sandbox prior to running the command. If the file ends in tar.gz,
it will be automatically extracted.

=item --tarball-if-fail

This option will create a compressed archive of the sandbox in temp_dir, in case that the return code of the command is nonzero.

=item --random-nice

This option will run the command with a randomly chosen nice value (in the range +0 to +15). May improve performance when
several instances of zsandbox are executing simultaneously.

=item --debug

This option prevents cleaning up the sandbox directory to help debugging. Sandbox is typically named temp_dir/zsandbox-*

=item --fail-if-disk-full-above=N

Before running the sandbox command, check if temp_dir is at least N percent full (using df -l temp_dir). If the usage is too high,
do NOT run the command and exit 1 instead. Make sure N is an integer 0-99, no sanity checking is done.

=back

=head1 RETURN VALUE

B<zsandbox> returns 1 if the command could not be executed, otherwise
the command return value is emitted.

=head1 SEE ALSO

zoptparse.sh

=cut
